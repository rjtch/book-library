openapi: 3.0.1
info:
  title: Book Library
  description: |
    This is a sample API that describes the structure of our Book-Library-Server
  version: 1.0.0
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Users endpoint provided by the Book-Library
  - name: loans
    description: Loans endpoint provided by the Book-Library
  - name: categories
    description: Book-category endpoint provided by the Book-Library
  - name: books
    description: Books endpoint provided by the Book-Library
paths:
  /v1/users/create:
    post:
      tags:
        - users
      operationId: NewUser
      summary: create new users
      security:
        - sessionCookie: [ ]
      description: |
        Simple create interface used to create a new user in the databse
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
      requestBody:
        description: Create user requestBody
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newUser"
        required: true
      x-codegen-request-body-name: NewUser
      responses:
        '202':
          $ref: "#/components/responses/202_NewUser"
          description: sucessful action
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized
        '400':
          $ref: "#/components/responses/400_InvalidID"
          description: Invalid ID value

  /v1/users/update:
    put:
      tags:
        - users
      summary: Update an existing user
      description: |
        Simple update interface used to update an existing user in the database
      operationId: Update
      security:
        - sessionCookie: [ ]
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
      requestBody:
        description: update user requestBody
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUser"
        required: true
      x-codegen-request-body-name: UpdateUser
      responses:
        '200':
          $ref: "#/components/responses/200_UpdateUser"
          description: sucessful action
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized
        '400':
          $ref: "#/components/responses/400_InvalidID"
          description: Invalid ID value

  /v1/users/{user-id}:
    get:
      tags:
        - users
      summary: Finds user by user-id
      description: |
        Simple getter interface used to get an existing user by its ID
      operationId: Retreive
      security:
        - sessionCookie: [ ]
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
        - $ref: "#/components/parameters/user-id"
      responses:
        '200':
          description: successful operation
          $ref: '#/components/responses/200_UserInfo'
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized
        '404':
          $ref: "#/components/responses/404_NotFound"
          description: Not found

  /v1/users/all:
    get:
      tags:
        - users
      summary: List all users
      description: |
        Simple getter interface used to get all users
      operationId: List
      security:
        - sessionCookie: [ ]
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
      responses:
        '200':
          description: list of all users
          $ref: '#/components/responses/200_UserInfoList'
        '400':
          $ref: "#/components/responses/400_InvalidID"
          description: Invalid ID
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized

  /v1/users/{user-id}/delete:
    delete:
      tags:
        - users
      summary: Delete user by id
      description: |
        Simple delete interface used to delete user by ID
      operationId: Delete
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
        - $ref: "#/components/parameters/user-id"
      security:
        - sessionCookie: [ ]
        #path
        - $ref: "#/components/parameters/user-id"
      responses:
        '200':
          $ref: "#/components/responses/successfulDeleted"
          description: successful operation
        '400':
          $ref: "#/components/responses/400_InvalidID"
          description: Invalid ID supplied
        '404':
          $ref: "#/components/responses/404_NotFound"
          description: Not found
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized

  /v1/users/token:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: ''
      operationId: logInPost
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
      requestBody:
        description: Login request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginRequest"
        required: true
      x-codegen-request-body-name: loginRequest
      responses:
        '200':
          $ref: "#/components/responses/200_UserInfo"
        '404':
          $ref: "#/components/responses/401_Unauthorized"

  /v1/users/{user_id}/logout:
    post:
      tags:
        - users
      summary: Logout user into the system
      description: |
        Simple logout interface used to delete user by ID
      operationId: logout
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
        - $ref: "#/components/parameters/user-id"
      security:
        - sessionCookie: [ ]
      responses:
        "200":
          description: nothing returned
        "401":
          $ref: "#/components/responses/401_Unauthorized"

  #--------BOOKS---------


  /v1/books/create:
    post:
      tags:
        - books
      operationId: NewBook
      summary: create new books
      security:
        - sessionCookie: [ ]
      description: |
        Simple create interface used to create a new book in the databse
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
      requestBody:
        description: Create user requestBody
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newBook"
        required: true
      x-codegen-request-body-name: NewBook
      responses:
        '202':
          $ref: "#/components/responses/202_NewBook"
          description: sucessful action
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: entity not authorized
        '400':
          $ref: "#/components/responses/400_InvalidID"
          description: Invalid ID value

  /v1/books/update:
    put:
      tags:
        - books
      summary: Update an existing book
      description: |
        Simple update interface used to update an existing user in the database
      operationId: Update book
      security:
        - sessionCookie: [ ]
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
      requestBody:
        description: update book requestBody
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateBook"
        required: true
      x-codegen-request-body-name: UpdateBook
      responses:
        '200':
          $ref: "#/components/responses/200_UpdateBook"
          description: sucessful action
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized
        '400':
          $ref: "#/components/responses/400_InvalidID"
          description: Invalid ID value

  /v1/books/{book-id}:
    get:
      tags:
        - books
      summary: Finds user by user-id
      description: |
        Simple getter interface used to get an existing user by its ID
      operationId: Retreive Book
      security:
        - sessionCookie: [ ]
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
        - $ref: "#/components/parameters/book-id"
      responses:
        '200':
          description: successful operation
          $ref: '#/components/responses/200_BookInfo'
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized
        '404':
          $ref: "#/components/responses/404_NotFound"
          description: Not found

  /v1/books/all:
    get:
      tags:
        - books
      summary: List all books
      description: |
        Simple getter interface used to get all books
      operationId: List all Books
      security:
        - sessionCookie: [ ]
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
      responses:
        '200':
          description: list of all books
          $ref: '#/components/responses/200_BookInfoList'
        '400':
          $ref: "#/components/responses/400_InvalidID"
          description: Invalid ID
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized

  /v1/books/{book-id}/delete:
    delete:
      tags:
        - books
      summary: Delete book by id
      description: |
        Simple delete interface used to delete book by ID
      operationId: Delete books
      parameters:
        #header
        - $ref: "#/components/headers/X-Request-ID"
        - $ref: "#/components/parameters/book-id"
      security:
        - sessionCookie: [ ]
        #path
        - $ref: "#/components/parameters/book-id"
      responses:
        '200':
          $ref: "#/components/responses/successfulDeleted"
          description: successful operation
        '400':
          $ref: "#/components/responses/400_InvalidID"
          description: Invalid ID supplied
        '404':
          $ref: "#/components/responses/404_NotFound"
          description: Not found
        '401':
          $ref: "#/components/responses/401_Unauthorized"
          description: user not authorized



#-----------------
components:
  securitySchemes:
    sessionCookie:
      type: apiKey
      in: cookie
      name:
      description: >
        keeps the connection between the UI and the server and it sets in cookies in the header-response in the browser and
        is used to verified the identity of the sender each time he calls the server.

  headers:
    X-Request-ID:
      name: X-Request-ID
      required: true
      description: |
        In Golang a Unique ID is used in the context-structure to make sure
        each time a request get through an API it can be identified properly and be canceled any time.
      example: "99391c7e-ad88-49ec-a2ad-99ddcb1f7721"
      schema:
        type: string
        format: uuid
    Set-SessionCookie:
      name: Set-Cookie
      description: |
        SessionCookie used to maintain the login session between the frontend and the backend and  is validated using a so called
        X-XSRF-TOKEN sent with the request header.

        Remember  that the XSRF-TOKEN value must be extracted from the request parameter named X-XSRF-TOKEN
        and not from a cookie header. This is important to mention as some implementation might return the
        XSRF-TOKEN to the FinTechUI in form of a cookie.
      schema:
        type: string
        example: Session=ejxs.wersdzxxc23r.asdf; Path=/

  parameters:
    SESSION-COOKIE:
      name:
      required: true
      in: header
      schema:
        type: string
        example: =upUySJYvsUjRuALYqd0Lr82HGz4RZNb_Mxu9WVOQHJGXa71z

    user-id:
      name: user_id
      in: path
      required: true
      schema:
        type: string

    book-id:
      name: book_id
      required: true
      in: path
      schema:
        type: string

    loan-id:
      name: loan_id
      in: path
      required: true
      schema:
        type: string

    categories-id:
      name: categories_id
      in: path
      required: true
      schema:
        type: string

  responses:
    202_NewUser:
      description: |
        The new created user. Only admin user can create new user and seed it in the database.
      headers:
        X-Request-ID:
          $ref: "#/components/parameters/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: object
            properties:
              newUser:
                $ref: "#/components/schemas/newUser"

    200_UpdateUser:
      description: |
        The updated user. Only the user itself or an admin can update a user.
      headers:
        X-Request-ID:
          $ref: "#/components/parameters/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: object
            properties:
              updateUser:
                $ref: "#/components/schemas/updateUser"

    200_UserInfoList:
      description: |
        This object returns the list of all available users. Only an admin can proceed this action.
      headers:
        X-Request-ID:
          $ref: "#/components/parameters/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/userList"

    200_UserInfo:
      description: |
        This object returns an available users. Only an admin or the user itself can proceed this action.
      headers:
        X-Request-ID:
          $ref: "#/components/parameters/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: object
            properties:
              userInfo:
                $ref: "#/components/schemas/userInfo"

    400_BadRequest:
      description: Bad request
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/psuMessage"

    401_Unauthorized:
      description: |
        Provided credentials are wrong, not provided or invalid or user has not required roles for executing this action.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: object
            properties:
              errorResponse:
                $ref: "#/components/schemas/errorResponse"

    404_NotFound:
      description: The required resources was not found
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: "#/components/schemas/errorResponse"

    #----------BOOKS-----------

    202_NewBook:
      description: |
        The new created book. Only admin user can create new book and seed it in the database.
      headers:
        X-Request-ID:
          $ref: "#/components/parameters/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: object
            properties:
              newBook:
                $ref: "#/components/schemas/newBook"

    200_UpdateBook:
      description: |
        The updated book. Only an admin can update a book.
      headers:
        X-Request-ID:
          $ref: "#/components/parameters/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: object
            properties:
              updateBook:
                $ref: "#/components/schemas/updateBook"

    200_BookInfoList:
      description: |
        This object returns the list of all available books.
      headers:
        X-Request-ID:
          $ref: "#/components/parameters/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/bookList"

    200_BookInfo:
      description: |
        This object returns an available book list.
      headers:
        X-Request-ID:
          $ref: "#/components/parameters/X-Request-ID"
        SESSION-COOKIE:
          $ref: "#/components/parameters/SESSION-COOKIE"
      content:
        application/json:
          schema:
            type: object
            properties:
              bookInfo:
                $ref: "#/components/schemas/bookInfo"
  #--------------------------

  schemas:
    # Login
    loginRequest:
      title: Login Request
      type: object
      required:
        - email
        - password
      properties:
        username:
          type: string
        password:
          type: string
    #new-user
    newUser:
      title: New User
      type: object
      required:
        - name
        - email
        - password
        - passwordConfirm
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        passwordConfirm:
          type: string

    updateUser:
      title: User Update
      type: object
      required:
        - name
        - email
        - password
        - passwordConfirm
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        passwordConfirm:
          type: string

    userInfo:
      title: User Infos
      type: object
      required:
        - email
        - name
      properties:
        name:
          type: string
        email:
          type: string

    UserInfoList:
      title: list of Users
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/userInfo"

    #-------------BOOKS---------------------

    newBook:
      title: New Book
      type: object
      required:
        - title
        - isbn
        - category
        - describtion
        - authors
      properties:
        title:
          type: string
        isbn:
          type: string
        category:
          type: string
        description:
          type: string
        authors:
          type: array
           items:
             type: string

    updateBook:
      title: Book Update
      type: object
      required:
        - authors
        - description
        - quantity
      properties:
        authors:
          type: array
          items:
            type: string
        description:
          type: string
        quantity:
          type: integer

    bookInfo:
      title: Book Infos
      type: object
      required:
        - title
        - description
        - authors
        - quantity
        - category
      properties:
        title:
          type: string
        description:
          type: string
        authors:
          type: array
          items:
            type: string
        quantity:
          type: integer
        category:
          type: string

    bookInfoList:
      title: list of books
      type: object
      required:
        - books
      properties:
        books:
          type: array
          items:
            $ref: "#/components/schemas/bookInfo"


    errorResponse:
      title: ErrorResponse
      type: object
      properties:
        userMessage:
          type: array
          items:
            $ref: "#/components/schemas/userMessage"

    userMessage:
      title: userMessage
      type: object
      required:
        - category
        - code
      properties:
        category:
          type: string
          enum:
            - ERROR
            - WARNING
            - INFO
        code:
          type: string
        path:
          type: string
        text:
          type: string

#    Reset-Cookies:
#      name: Reset-Cookie
#      description: |
#        Delete all relevant cookies
#      schema:
#        type: string
#        example: |
#          "RedirectSession=null; Path=/; Max-Age=0, Session=null; Path=/; Max-Age=0"


